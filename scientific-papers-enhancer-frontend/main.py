from dotenv import load_dotenv
import os
import streamlit as st
import requests
import pyperclip
from datetime import datetime

def clear_text():
    st.session_state.user_input = ""
    st.session_state.processed_text = ""

# –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ API
LANGUAGE_MAPPING = {
    "–†—É—Å—Å–∫–∏–π": "ru",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "eng"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

API_URL = os.getenv("API_URL")
MAX_WORDS = int(os.getenv("MAX_WORDS"))


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
st.set_page_config(
    page_title="Scihancer",
    page_icon="üß™")

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown(
    """
    <style>
    .main > div {
        max-width: 80%;
        padding: 1rem 3rem;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# –û–ø–∏—Å–∞–Ω–∏–µ
st.title("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤")
st.write("""
–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ò–ò-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
""")

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
selected_display_language = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", 
        list(LANGUAGE_MAPPING.keys())
    )
language_code = LANGUAGE_MAPPING[selected_display_language]

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
col1, col2 = st.columns(2)

# –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
with col1:
    st.subheader("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç")
        
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    user_input = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç...",
        height=300,
        value="–Ø –¥—É–º–∞—é, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∏–º–∞—Ç–∞ - —ç—Ç–æ –±–æ–ª—å—à–∞—è –ø—Ä–æ–±–ª–µ–º–∞...",
        key="user_input",
        label_visibility="collapsed",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...",
        help="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–ª–æ–≤."
    )
    
    # –°—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤
    word_count = len(user_input.split()) if user_input else 0
    st.caption(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {word_count}. –ú–∞–∫—Å–∏–º—É–º: {MAX_WORDS} —Å–ª–æ–≤")

    col_transform, col_clear = st.columns(2)
    with col_transform:
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if st.button("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å üöÄ", type="primary", use_container_width=True):
            if user_input:
                if word_count > MAX_WORDS:
                        st.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ ({word_count} > {MAX_WORDS} —Å–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.session_state.processed_text = ""
                    st.session_state.last_processed = None
                    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞..."):
                        try:
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
                            payload = {
                                "text": user_input,
                                "language": language_code
                            }
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
                            response = requests.post(
                                API_URL,
                                json=payload,
                                headers={"Content-Type": "application/json"}
                            )
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                            if response.status_code == 200:
                                result = response.json()
                                st.session_state.processed_text = result.get("text", "")
                                st.session_state.last_processed = datetime.now().strftime("%H:%M:%S")
                            else:
                                st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                                
                        except requests.exceptions.RequestException as e:
                            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {str(e)}")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
    with col_clear:
        st.button("–û—á–∏—Å—Ç–∏—Ç—å üßπ", on_click=clear_text, use_container_width=True)


# –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç
with col2:
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ")
    
    if 'processed_text' in st.session_state and st.session_state.processed_text != "":
        st.markdown(
            f"""
            <div style="
                background: #f8f9fa;
                padding: 1rem;
                border-radius: 10px;
                border-left: 4px solid #3498db;
                min-height: 300px;
                margin-bottom: 1.1rem;
                placeholder: '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...';
            ">
            {st.session_state.processed_text}
            </div>
            """,
            unsafe_allow_html=True
        )

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        # st.text_area(
        #     "–†–µ–∑—É–ª—å—Ç–∞—Ç", 
        #     value=st.session_state.processed_text,
        #     height=300,
        #     key="result_area",
        #     label_visibility="collapsed",
        #     disabled=True,
        # )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if 'last_processed' in st.session_state:
            st.caption(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ {st.session_state.last_processed}")
        
        col_copy, col_download = st.columns([1, 1])
        with col_copy:
            if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å üìù", use_container_width=True):
                pyperclip.copy(st.session_state.processed_text)
                st.success("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!") 
        with col_download:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å üíæ",
                data=st.session_state.processed_text,
                file_name="enhanced_text.txt",
                mime="text/plain",
                key="download_button",
                use_container_width=True
            )
    else:
        st.info("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
